#!/usr/bin/env node

/**
 * Module dependencies.
 */

// let dnsupdater = require('child_process').exec('dnsupdate');
// dnsupdater.stdout.on('data', data => {
const app = require('../app');
const debug = require('debug')('7-days.io:server');
const https = require('https');
const fs = require('fs')

/**
 * Get port from environment and store in Express.
 */

const key = fs.readFileSync('.well-known/certificates/private.key', 'utf8');
const cert = fs.readFileSync('.well-known/certificates/certificate.crt', 'utf8');
const ca = fs.readFileSync('.well-known/certificates/ca_bundle.crt', 'utf8');
const credentials = {
	key,
	cert,
	ca
};

const port = normalizePort(process.env.PORT || '443');
app.set('port', port);

/**
 * Create https server.
 */

const server = https.createServer(credentials, app);
// const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Route HTTP traffic to HTTPS

const http = require('http');
http.createServer(function(req, res) {
	res.writeHead(301, {
		"Location": "https://" + req.headers['host'] + req.url
	});
	res.end();
}).listen(80);
 */
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	const port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for https server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	const bind = typeof port === 'string' ?
		'Pipe ' + port :
		'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for https server "listening" event.
 */

function onListening() {
	const addr = server.address();
	const bind = typeof addr === 'string' ?
		'pipe ' + addr :
		'port ' + addr.port;
	debug('Listening on ' + bind);

	console.log('Listening')
}
// })